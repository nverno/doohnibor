<svg xmlns="http://www.w3.org/2000/svg" height="48" width="48" fill="#00C805"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M22.724 32.75l-.185.061c-1.185.393-2.939.996-4.513 1.717-.085.04-.14.15-.14.15l-.108.244-.005.012c-.177.4-.42 1-.523 1.245l-.082.193a.081.081 0 00.072.112.079.079 0 00.037-.009l.19-.09c.432-.204.975-.513 1.548-.784l.02-.009c1.087-.513 2.315-1.093 3.053-1.444 0 0 .12-.063.179-.182l.553-1.104a.08.08 0 00-.097-.112m-4.42-1.712c.077-.152.436-.839.517-.992l.015-.027a68.172 68.172 0 018.697-12.642l.093-.108a.105.105 0 00.013-.12.109.109 0 00-.11-.055l-.14.02a69.798 69.798 0 00-6.652 1.247.877.877 0 00-.39.236 74.578 74.578 0 00-4.646 6.158c-.072.107-.08.364-.08.364s.362 2.762.888 4.797c-1.304 3.731-2.467 8.647-2.467 8.647a.107.107 0 00.017.093.11.11 0 00.084.044h.742a.107.107 0 00.103-.07l.052-.139a68.36 68.36 0 012.575-6.063c.222-.46.69-1.39.69-1.39"/><path d="M28.62 18.183l-.002-.14a.108.108 0 00-.189-.07l-.092.107a67.06 67.06 0 00-9.813 14.922l-.06.125a.107.107 0 00.019.12.107.107 0 00.119.025l.129-.053a64.253 64.253 0 016.698-2.343.509.509 0 00.312-.255C26.723 28.717 29 25.03 29 25.03c.058-.084.044-.207.044-.207s-.4-4.41-.424-6.641"/><path d="M31.076 11.089c-1.14-.024-2.496.22-4.032.724-.23.08-.413.207-.577.368a74.282 74.282 0 00-4.517 4.608l-.11.122a.106.106 0 00-.012.124c.023.04.07.06.115.051l.16-.034a69.76 69.76 0 016.943-1.12.542.542 0 01.42.137.53.53 0 01.174.403c-.038 2.265.044 4.541.248 6.765l.013.146a.106.106 0 00.079.093c.06.005.094-.012.116-.042l.084-.119a63.606 63.606 0 014.176-5.304c.163-.188.207-.306.239-.477.465-2.964-.254-5.156-.896-5.71-.558-.481-1.367-.708-2.623-.735z"/></svg>